CatFlip: A Fast Word Prediction Application
========================================================
author: Qubixes
date: 23/12/2018
autosize: true

Introduction
========================================================

The application *CatFlip* is a word prediction algorithm; given a some chunk of text, predict the next word. We use *n*-grams; frequencies of *n* consecutive words to predict the next word.

Features of *CatFlip*:

- Fast prediction: 2-20 milliseconds.
- Fast and flexible training: critical path written in C++, minutes -> several hours training.
- Lower memory requirements: training: 8GB, application: 27MB - 2GB.
- Multiple languages (4 implemented, but adding a new one is extremely simple).
- Top 3 predictions
- Good prediction performance (~27% top 3 for US English)
- Modular approach with good extensibility.

Training with CatFlip
========================================================

- *CatFlip* ignores *n*-grams below a certain frequency threshold, saving memory and computing time.
- Key insight: if an *(n-1)*-gram *s* is below a threshold, then any *n*-gram starting with *s* will be below the threshold as well.
- Uses partly C++ due to limitations of hash tables in R. 
- Tokenization with R quanteda package.
- Build a hash table of all 1-grams, then store a 2-gram (*X*,*Y*) if both are above the threshold. Continue with 3, 4... *n*-grams.
- Two tokenizers for prediction are supplied: "fast" (2 ms per word) or "slow" (20 ms per word). 
- The "fast" tokenizer uses the quanteda "fastestword" algorithm, but due to a bug in the quanteda software has to remove punctuation again.
- Algorithm replaces "." with a special word to mark end of sentences. This improves the algorithm with about 0.5% top 3 prediction, with little cost.

Using the Application CatFlip
========================================================

- Type something in the text box.
- Predictions buttons below from left to right.
- Click the prediction button to insert.
- Drop down menu to choose language.
- Checkbox for fast tokenization (slightly worse predictions).
- Bar plot on the right with prediction performance (refresh).


<div align="center">
<img src="app.png" width=550 height=413>
</div>


Performance and Outlook
========================================================

- Prediction performance is reasonable (below).
- Finnish is clearly the hardest language for the algorithm.
- Language filter can be easily implemented and inserted (after n-gram determination).
- Using dictionaries/stemming might improve performance with the same limited data.


![perf](prediction_rate.png)
